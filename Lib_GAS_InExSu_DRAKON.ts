// Autogenerated with DRAKON Editor 1.31


function arrays_2_Sheet(map_SKU_URL, map_URL_Time, sheet) {
    // item 119
    let urls: string[] = [];
    
    urls = Array.from(
    	map_URL_Time.values());
    
    // удаляю третий столбец
    urls = urls.map(
    	(row) => row.slice(0, -1));
    // item 123
    const sku_URL = 
    	Array.from(map_SKU_URL, 
    		([key, value]) => [key, value]);
    // item 120
    sheet.getRange('A2:E').clear();
    // item 121
    table_2_Range(
    	sku_URL,
    	sheet.getRange('A2'));
    // item 122
    table_2_Range(
    	urls,
    	sheet.getRange('D2'));
}

function between_Strings(hayStack, start, stop_) {
    // item 265
    const regex = new RegExp(
    	start + 
    	"(.*?)" + 
    	stop_, "g")
    
    const matches = hayStack
    			.match(regex)
    
    var retu = []
    // item 266
    if ((matches) && (matches.length > 0)) {
        // item 272
        retu = matches
        	.map(match => 
        		match
        			.substring(
        				start.length, 
        				match.length - stop_.length))
    } else {
        
    }
    // item 273
    return retu
}

function between_Strings_Test() {
    // item 279
    const hayStack = 
    	'Нач  <span> строка 1 ' + 
    	'</span> Пром ' + 
    	'<span> строка 2 ' + 
    	'</span> Конеч'
    	
    const start = "<span>";
    
    const stop_ = "</span>";
    
    const extract = 
    	between_Strings(
    		hayStack, 
    		start, 
    		stop_);
    
    console.log(extract);
}

function console_If(msg: string | object, debug = true) {
    // item 37
    if (debug) {
        // item 39
        console.log(msg)
    } else {
        
    }
}

function duplicates_Remove(table, column) {
    // item 102
    // удаляет строки с дубликатами в столбце.
    
    var uniqueValues = []
    // item 1030001
    let row = 0;
    while (true) {
        // item 1030002
        if (row < table.length) {
            
        } else {
            break;
        }
        // item 108
        var value = table[row][column]
        // item 105
        if (uniqueValues.indexOf(value) === -1) {
            // item 110
            // Если значение в столбце еще не встречалось, 
            // добавляем его в массив уникальных значений
            // item 109
            uniqueValues.push(value)
        } else {
            // item 111
            // Если значение уже встречалось, 
            // удаляем строку из массива данных
            // item 112
            table.splice(row, 1)
            row--
        }
        // item 1030003
        row++;
    }
    // item 113
    return table
}

function duplicates_Remove_Test() {
    // item 96
      const array = [
        ["https://protivogaz.store/product/", "19.01.2024 23:39", "102-024-0002"],
        ["https://protivogaz.store/product/", "19.01.2024 23:39", "302-123-0003"],
        ["https://protivogaz.store/product/polumaska", "19.01.2024 23:39", "102-025-0006"],
      ];
    
      const newArray = duplicates_Remove(array, 0);
    
      console.log(newArray);
      // Должно быть
      // [
      //   ["https://protivogaz.store/product/", "19.01.2024 23:39", "102-024-0002"],
      //   ["https://protivogaz.store/product/polumaska", "19.01.2024 23:39", "102-025-0006"],
      // ];
}

function fetch_URL(url, params) {
    // item 200
    /*
    если в режиме отладки 
    getContentText() зависает
    то нужно войти с нужным аккаунтом
    */
    // item 196
    if (params === undefined) {
        // item 199
        params = {
        	method:             'get', 
        	muteHttpExceptions: true
        	}
    } else {
        
    }
    // item 195
    var html = ''
    
    try {
    	html = 
    		UrlFetchApp
    			.fetch(
    				url, 
    				params)
    			.getContentText()
    
    } catch (error) {
    
    	console.log(
    		'Ошибка fetch на ' + 
    		url)
    }
    
    return html
}

function fetch_URL_Test() {
    // item 206
    const url = 
    'https://www.list-org.com' + 
    '/search?type=name&val=' + 
    '%D1%82%D0%B0%D0%BC%D0%B1%D0%BE%D0%B2%D0%BC%D0%B0%D1%88' + 
    '&work=on'
    
    const params = {
        method: "get",
        muteHttpExceptions: true
      };
    // item 207
    const html = fetch_URL(
    		url, 
    		params)
    
    console.log(html)
}

function html_2_RegEx(html, regEx) {
    // item 222
    /*
    вернуть первое вхождение,
    найденное регуляркой
    */
    // item 219
    const match = regEx
    		.exec(html);
    
    var retu = 'НЕ найдено'
    // item 223
    if ((match === null) || (!(match.includes(1)))) {
        
    } else {
        // item 221
        retu = match[1].trim()
    }
    // item 220
    return retu
}

function html_2_RegEx_All(html, regEx) {
    // item 246
    /*
    вернуть все вхождения,
    найденные регуляркой
    */
    // item 240
    const match = html
    	.match(regEx);
    
    var retu = []
    // item 241
    if (match) {
        // item 245
        retu = match
    } else {
        
    }
    // item 244
    return retu
}

function html_2_RegEx_All_Test() {
    // item 252
    const url = 
    'https://www.list-org.com' + 
    '/search?type=name&val=' + 
    '%D1%82%D0%B0%D0%BC%D0%B1%D0%BE%D0%B2%D0%BC%D0%B0%D1%88' + 
    '&work=on'
    
    const params = {
        method:             "get",
        muteHttpExceptions: true
      };
    
    const html = fetch_URL(url, params)
    
    const regEx = /\/company\/\d+/g;
    
    const resu = 
    	html_2_RegEx_All(
    		html, 
    		regEx)
    
    console.log(resu)
}

function html_2_RegEx_Test() {
    // item 234
    const url = 
    'https://www.list-org.com/company/6948'
    
    const params = {
        method:             "get",
        muteHttpExceptions: true
      };
    
    const html = fetch_URL(url, params)
    
    const regEx = 
    /Юридический адрес:<\/i>\s*<span class='upper'>(.*?)</i;
    
    const resu = html_2_RegEx(html, regEx)
    
    console.log(resu)
}

function html_Links_Get_RegEx(html, regex = /<a\s+(?:[^>]*?\s+)?href="([^"]*-inn-[^"]*)"/gi) {
    // item 182
    
      const matches = html.match(regex);
    
      // оставить только значения атрибута href
      return matches.map(
    	match => 
    	match.match(/href="([^"]*)"/)[1]);
}

function html_Links_Get_RegEx_Test() {
    // item 189
    const url = 
    'https://www.list-org.com' + 
    '/search?type=name&val=' + 
    '%D1%82%D0%B0%D0%BC%D0%B1%D0%BE%D0%B2%D0%BC%D0%B0%D1%88' + 
    '&work=on'
    
    const params = {
        method:             "get",
        muteHttpExceptions: true
      };
    
    const html = fetch_URL(url, params)
    // item 188
      const links = html_Links_Get_RegEx(html)
    
      if (links.length !== 7) {
        console.log('html_Links_Get_RegEx_Test ОШибка')
      } else {
        console.log('html_Links_Get_RegEx_Test Успех')
      }
}

function html_Special_Replace(str) {
    // item 152
    const map = {
        "&quot;": "\"",
        "&amp;": "&",
        "&apos;": "'",
        "&lt;": "<",
        "&gt;": ">"
      };
    
    return string_Replace_By_Map(str, map)
}

function html_URLs(html, regex) {
    // item 85
    // вернуть найденное по регулярному
    // item 87
    if (html) {
        // item 86
            try {
                const matches = html.match(regex) || []; null
                return matches.reduce((accumulator, match) => {
                    const url = match.split('"')[1]; 
                    if (url.includes('protivogaz.store/product') ||
                        url.includes('/page/') ||
                        url.includes('protivogaz.store/category')) {
                        accumulator.push(url);
                    }
                    return accumulator;
                }, []);
            } catch (error) {
                console.error('html_URLs ERROR: ' + error.toString()); 
                return [];
            }
    } else {
        // item 90
        return []
    }
}

function map_Array_Add(map, array) {
    // item 1290001
    var _ind129 = 0;
    var _col129 = array;
    var _len129 = _col129.length;
    while (true) {
        // item 1290002
        if (_ind129 < _len129) {
            
        } else {
            break;
        }
        // item 1290004
        var element = _col129[_ind129];
        // item 133
        if (map.has(element)) {
            
        } else {
            // item 132
            map.set(element,[element, '', '']);
        }
        // item 1290003
        _ind129++;
    }
    // item 131
    return map;
}

function range_Replace_In_Cells(range, regex, replacement) {
    // item 45
      const sheet = range.getSheet()
      const values = range.getValues();
    // item 46
    // заменить в диапазоне по отдельным ячейкам
    // item 480001
    let row = 0;
    while (true) {
        // item 480002
        if (row < values.length) {
            
        } else {
            break;
        }
        // item 500001
        let col = 0;
        while (true) {
            // item 500002
            if (col < values[row].length) {
                
            } else {
                break;
            }
            // item 500003
            col++;
        }
        // item 52
        const cellValue = values[row][col].toString();
        // item 53
        if (cellValue.match(regex)) {
            // item 56
            sheet.getRange(row + 1, col + 1)
            	.setValue(cellValue
            	.replace(regex, replacement));
        } else {
            
        }
        // item 480003
        row++;
    }
}

function range_Replace_In_Cells_Test() {
    // item 62
     const spread = SpreadsheetApp.getActiveSpreadsheet();
     const sheet = spread.getSheetByName('Copy of Дашборд');
     const range = sheet.getDataRange();
     const regex = /SUM of |COUNT of /;
    
     range_Replace_In_Cells(range, regex, '')
}

function requisites_Get(html) {
    // item 213
    return [
    	html_2_RegEx(html, /name&val=([^']+)'>(.*?)<\/a>/), 
    	html_2_RegEx(html, /itemprop="address">([^<]*)<\/div>/g),
    	html_2_RegEx(html, /itemprop="address">([^<]*)<\/div>/g),
    	html_2_RegEx(html, /itemprop="address">([^<]*)<\/div>/g), 
    	html_2_RegEx(html, /itemprop="address">([^<]*)<\/div>/g),
        ]
}

function requisites_Get_Test() {
    // item 258
    const url = 
    'https://www.list-org.com' + 
    '/search?type=name&val=' + 
    '%D1%82%D0%B0%D0%BC%D0%B1%D0%BE%D0%B2%D0%BC%D0%B0%D1%88' + 
    '&work=on'
    
    const params = {
        method: "get",
        muteHttpExceptions: true
      };
    // item 259
    const html = fetch_URL(
    			url, 
    			params)
    
    console.log(
    	requisites_Get(
    		html))
}

function string_Replace_By_Map(str, map) {
    // item 158
    // заменить в строке по словарю
    // item 1590001
    var _ind159 = 0;
    var _col159 = Object.keys(map);
    var _len159 = _col159.length;
    while (true) {
        // item 1590002
        if (_ind159 < _len159) {
            
        } else {
            break;
        }
        // item 1590004
        var key = _col159[_ind159];
        // item 161
        str = str.replaceAll(key, map[key])
        // item 1590003
        _ind159++;
    }
    // item 162
    return str;
}

function string_Replace_By_Map_Test() {
    // item 168
      const testCases = [
        {
          input: "ДОМ &quot;Перекресток&quot;, АО",
          expectedOutput: "ДОМ \"Перекресток\", АО"
        },
        {
          input: "This &amp; that, &apos;quoted&apos;, <tag>, &gt;more&lt;",
          expectedOutput: "This & that, 'quoted', <tag>, >more<"
        },
        {
          input: "No special characters here",
          expectedOutput: "No special characters here"
        },
        {
          input: "&unknownEntity;",  
          expectedOutput: "&unknownEntity;"
        },
        {
          input: "",  // Test empty string
          expectedOutput: ""
        }
      ];
    // item 1690001
    var _ind169 = 0;
    var _col169 = testCases;
    var _len169 = _col169.length;
    while (true) {
        // item 1690002
        if (_ind169 < _len169) {
            
        } else {
            break;
        }
        // item 1690004
        var testCase = _col169[_ind169];
        // item 171
        const output = 
        	html_Special_Replace(testCase.input);
        // item 172
        if (output === testCase.expectedOutput) {
            // item 175
            Logger.log(
            	`Test ${testCase.input} passed!`)
        } else {
            // item 176
            Logger.log(
            	`Test ${testCase.input} failed! ' + 
            	'Expected: ${testCase.expectedOutput},' + 
            	' Actual: ${output}`);
        }
        // item 1690003
        _ind169++;
    }
}

function table_2_Map(table, column_Key, column_Item) {
    // item 18
    // таблицу массив из диапазона
    // в словарь
    // item 6
    var map = new Map();
    // item 70001
    let row = 0;
    while (true) {
        // item 70002
        if (row < table.length) {
            
        } else {
            break;
        }
        // item 9
        const key = table[row][column_Key];
        const item = table[row][column_Item];
        // item 10
        if ((key === undefined) || (item === undefined)) {
            
        } else {
            // item 16
            map.set(key, item);
        }
        // item 70003
        row++;
    }
    // item 17
    return map;
}

function table_2_Range(table, cell) {
    // item 28
    /** массив-таблицу в диапазон, начиная с ячейки */
    // item 25
    if (table.length > 0) {
        // item 24
        cell.offset(0, 0, table.length, table[0].length)
        	.setValues(table);
    } else {
        
    }
}

function table_Sort_Date(table, column) {
    // item 69
    /** 
    сортировать таблицу по столбцу
    сначала пустые
    потом старые даты */
    // item 68
    return table.sort((a, b) => {
            // Сравниваем даты по возрастанию
            const dateA = new Date(a[column]);
            const dateB = new Date(b[column]);
            return dateA.getTime() - dateB.getTime();
        })
            .reverse();
}

function table_Sort_Date_Test() {
    // item 75
      const table = [
        ['00', 'Mon Dec 11 2023 03:16:51 GMT-0500 (Eastern Standard Time)'],
        ['01', 'Mon Dec 11 2023 04:16:52 GMT-0500 (Eastern Standard Time)'],
        ['02', ''],
      ];
    
      const sorted = table_Sort_Date(table, 1);	
    
      const wanted = [
        ['02', ''],
        ['01', 'Mon Dec 11 2023 04:16:52 GMT-0500 (Eastern Standard Time)'],
        ['00', 'Mon Dec 11 2023 03:16:51 GMT-0500 (Eastern Standard Time)'],
      ];
    // item 76
    if (JSON.stringify(sorted) === 
JSON.stringify(wanted)) {
        
    } else {
        // item 79
        console.log(
        	'table_Sort_Date_Test ОШИБКА');
    }
}



